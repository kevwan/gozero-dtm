// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransferInfo struct {
	Amount               int64    `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	FromID               int64    `protobuf:"varint,2,opt,name=FromID,proto3" json:"FromID,omitempty"`
	ToID                 int64    `protobuf:"varint,3,opt,name=ToID,proto3" json:"ToID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferInfo) Reset()         { *m = TransferInfo{} }
func (m *TransferInfo) String() string { return proto.CompactTextString(m) }
func (*TransferInfo) ProtoMessage()    {}
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

func (m *TransferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferInfo.Unmarshal(m, b)
}

func (m *TransferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferInfo.Marshal(b, m, deterministic)
}

func (m *TransferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferInfo.Merge(m, src)
}

func (m *TransferInfo) XXX_Size() int {
	return xxx_messageInfo_TransferInfo.Size(m)
}

func (m *TransferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransferInfo proto.InternalMessageInfo

func (m *TransferInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransferInfo) GetFromID() int64 {
	if m != nil {
		return m.FromID
	}
	return 0
}

func (m *TransferInfo) GetToID() int64 {
	if m != nil {
		return m.ToID
	}
	return 0
}

type Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}

func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}

func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}

func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}

func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TransferInfo)(nil), "order.TransferInfo")
	proto.RegisterType((*Response)(nil), "order.Response")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_cd01338c35d87077) }

var fileDescriptor_cd01338c35d87077 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x2f, 0x4a, 0x49,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x82, 0xb8, 0x78, 0x42,
	0x8a, 0x12, 0xf3, 0x8a, 0xd3, 0x52, 0x8b, 0x3c, 0xf3, 0xd2, 0xf2, 0x85, 0xc4, 0xb8, 0xd8, 0x1c,
	0x73, 0xf3, 0x4b, 0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0xa0, 0x3c, 0x90, 0xb8,
	0x5b, 0x51, 0x7e, 0xae, 0xa7, 0x8b, 0x04, 0x13, 0x44, 0x1c, 0xc2, 0x13, 0x12, 0xe2, 0x62, 0x09,
	0xc9, 0xf7, 0x74, 0x91, 0x60, 0x06, 0x8b, 0x82, 0xd9, 0x4a, 0x5c, 0x5c, 0x1c, 0x41, 0xa9, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x46, 0x36, 0x5c, 0x1c, 0xfe, 0x20, 0x8b, 0x82, 0xcb, 0x92, 0x85,
	0x0c, 0xb8, 0x38, 0x60, 0x76, 0x09, 0x09, 0xeb, 0x41, 0x1c, 0x83, 0x6c, 0xb9, 0x14, 0x3f, 0x54,
	0x10, 0xa6, 0xdb, 0x89, 0x25, 0x8a, 0xa9, 0x20, 0x29, 0x89, 0x0d, 0xec, 0x62, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x16, 0xe5, 0xb4, 0xaa, 0xc0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderSvcClient is the client API for OrderSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderSvcClient interface {
	Transfer(ctx context.Context, in *TransferInfo, opts ...grpc.CallOption) (*Response, error)
}

type orderSvcClient struct {
	cc *grpc.ClientConn
}

func NewOrderSvcClient(cc *grpc.ClientConn) OrderSvcClient {
	return &orderSvcClient{cc}
}

func (c *orderSvcClient) Transfer(ctx context.Context, in *TransferInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/order.OrderSvc/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSvcServer is the server API for OrderSvc service.
type OrderSvcServer interface {
	Transfer(context.Context, *TransferInfo) (*Response, error)
}

// UnimplementedOrderSvcServer can be embedded to have forward compatible implementations.
type UnimplementedOrderSvcServer struct{}

func (*UnimplementedOrderSvcServer) Transfer(ctx context.Context, req *TransferInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}

func RegisterOrderSvcServer(s *grpc.Server, srv OrderSvcServer) {
	s.RegisterService(&_OrderSvc_serviceDesc, srv)
}

func _OrderSvc_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSvcServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderSvc/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSvcServer).Transfer(ctx, req.(*TransferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderSvc",
	HandlerType: (*OrderSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _OrderSvc_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
